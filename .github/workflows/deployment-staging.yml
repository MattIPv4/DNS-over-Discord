name: Deploy to Staging

on:
  push:
    branches:
      - staging

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    env:
      NODE_OPTIONS: --unhandled-rejections=strict

    steps:
      - uses: actions/checkout@v1

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Use Node.js (.nvmrc)
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests
        run: npm test

  deploy:
    name: Deploy
    needs: test
    runs-on: ubuntu-latest

    env:
      NODE_OPTIONS: --unhandled-rejections=strict

    steps:
      - uses: actions/checkout@v1

      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm

      - name: Use Node.js (.nvmrc)
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"

      - name: Install Dependencies
        run: npm ci

      - name: Generate staging.env
        env:
          CLIENT_ID: ${{ secrets.STAGING_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.STAGING_CLIENT_SECRET }}
          CLIENT_PUBLIC_KEY: ${{ secrets.STAGING_CLIENT_PUBLIC_KEY }}
          TEST_GUILD_ID: ${{ secrets.STAGING_TEST_GUILD_ID }}
          SENTRY_AUTH_TOKEN: ${{ secrets.STAGING_SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.STAGING_SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.STAGING_SENTRY_PROJECT }}
          SENTRY_DSN: ${{ secrets.STAGING_SENTRY_DSN }}
        run: envsubst < staging.env.sample > staging.env

      - name: Publish to Staging
        run: npm run publish:staging
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
